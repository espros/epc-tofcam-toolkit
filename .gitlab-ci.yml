cache:
  paths:
    - .cache/pip
    - .venv/
    - .mypy_cache/

before_script:
  - python3 --version ; python3 -m pip --version  # For debugging
  # - python3 -m pip install virtualenv
  - if [ ! -d ".venv" ]; then python3 -m venv .venv; fi # only create a new venv if there is none
  - source .venv/bin/activate
  - pip install --upgrade pip
  - pip install -r requirements.txt

stages:
  - build
  - test
  - deploy
  - release

# this ensures that the pipeline only runs on the branch or merge request but not both
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_BRANCH'
      when: never
    - if: '$CI_COMMIT_BRANCH'
    - if: '$CI_COMMIT_TAG'

default:
  tags: 
    - shell-executor

code-analysis:
  stage: test
  allow_failure: true
  script:
    - pip install mypy mypy-gitlab-code-quality
    - mypy src/epc/tofCam_lib src/epc/tofCam_gui --no-error-summary > mypy-out.txt
  after_script:
    - echo "Collecting mypy results:"
    - cat mypy-out.txt
    - mypy-gitlab-code-quality < mypy-out.txt > codequality.json
  artifacts:
    reports:
      codequality: codequality.json

build-job:
  stage: build
  script:
    # build number is added to the version number if it is not a tag
    - if [ -z "$CI_COMMIT_TAG" ]; then echo "__version__ = '$(python setup.py --version)-${CI_PIPELINE_IID}'" > src/epc/_version.py; fi
    - python -m build --sdist --wheel .
  artifacts:
    paths:
      - dist/*

test-job:
  stage: test
  script:
    - pip install . 
    - pytest -m "not systemTest" --cov=src --cov-report term --cov-report xml:coverage.xml --junitxml=test_report.xml
  coverage: '/TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      junit: test_report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

test-tox:
  stage: test
  script:
    - tox
  tags:
    - shell-executor

check-changelog-updated:
  stage: test
  script:
    - echo "Checking if CHANGELOG.md has been updated in this merge request..."
    - |
      # Get the list of changed files in the merge request
      CHANGED_FILES=$(git diff --name-only origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}...HEAD)
      
      echo "Changed files:"
      echo "$CHANGED_FILES"
      
      # Check if CHANGELOG.md is in the list of changed files
      if echo "$CHANGED_FILES" | grep -q "CHANGELOG.md"; then
        echo "✓ CHANGELOG.md has been updated in this merge request"
        exit 0
      else
        echo "✗ ERROR: CHANGELOG.md has NOT been updated in this merge request"
        echo ""
        echo "Please update CHANGELOG.md with your changes before merging."
        echo "Add an entry describing what changed in this merge request."
        exit 1
      fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
      when: always

deploy-test-pypi-job:
  stage: deploy
  script:
    - TWINE_PASSWORD=${CI_TEST_PYPI_TOCKEN} TWINE_USERNAME=__token__ twine upload --repository testpypi dist/*
  only:
    - master

deploy-devpi-test-job:
  stage: deploy
  variables:
    DEVPI_TEST_INDEX: "http://devpi.espros.com/espros/test"
    DEVPI_USERNAME: "espros"
  script:
    - pip install devpi-client
    - devpi use $DEVPI_TEST_INDEX
    - devpi login $DEVPI_USERNAME --password $DEVPI_PASSWORD
    - devpi upload --formats sdist,wheel dist/*.whl dist/*.tar.gz
    - devpi logout
  only:
    - master

deploy-devpi-prod-job:
  stage: deploy
  variables:
    DEVPI_PROD_INDEX: "http://devpi.espros.com/espros/prod"
    DEVPI_USERNAME: "espros"
  script:
    - pip install devpi-client
    - devpi use $DEVPI_PROD_INDEX
    - devpi login $DEVPI_USERNAME --password $DEVPI_PASSWORD
    - devpi upload --formats sdist,wheel dist/*.whl dist/*.tar.gz
    - devpi logout
  only:
    - tags

deploy-pypi-job:
  stage: deploy
  script:
    - TWINE_PASSWORD=${CI_PYPI_TOCKEN} TWINE_USERNAME=__token__ twine upload dist/*
  only:
    - tags
  when: manual

trigger-release-job:
  stage: release
  script:
    - git config --global user.email "ci-pipeline@espros.com"
    - git config --global user.name "CI Pipeline"
    - git remote set-url origin "git@${CI_SERVER_HOST}:${CI_PROJECT_PATH}.git"
    - python scripts/update_version.py --bump --changelog CHANGELOG.md
    - git push origin HEAD:$CI_COMMIT_REF_NAME
    - git push origin --tags
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: manual